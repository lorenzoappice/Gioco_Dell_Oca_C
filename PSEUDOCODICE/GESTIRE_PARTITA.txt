giocare_partita
DATI DI INPUT
partita_attuale, la partita da gestire, record di tipo partita
file_percorso, il file contenente la schermata rappresentante il percorso, file di testo
DATI DI OUTPUT
vincitore_partita, il giocatore vincitore di partita_attuale, record di tipo vincitore
ALGORITMO
SE (leggere_turno(partita_attuale) = 0)
ALLORA
    partita_attuale = scegliere_giocatore(partita_attuale)
FINE
ESEGUI
    partita_attuale = cambiare_turno(partita_attuale)
    SE (leggere_autorizzazione(leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))) > 0)
    ALLORA
        partita_attuale = gestire_autorizzazione(partita_attuale)
    FINE
    SE (leggere_autorizzazione(leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))) = 0)
    ALLORA
        stampare_percorso(partita_attuale)
        partita_attuale = lanciare_dadi(partita_attuale)
        stampare_dadi(file_percorso)
        partita_attuale = spostare_giocatore(partita_attuale)
        stampare_percorso(partita_attuale)
        stampare_dadi(file_percorso)
        partita_attuale = verificare_casella(partita_attuale)
    FINE
FINCHE' (leggere_posizione_giocatore (leggere_giocatore (partita_attuale, leggere_turno (partita_attuale))) != leggere_lunghezza_percorso (partita_attuale))
vincitore_partita = inizializzare_vincitore(partita_attuale)



scegliere_giocatore 
DATI DI INPUT
partita_attuale, la partita in cui scegliere i giocatori, partita
file_scelta_g_iniziale, il file contenente la schermata per la scelta del giocatore iniziale, file di testo
PRIMO_DADO, la posizione del dado numero 1 nel campo ultimo_lancio del record partita, Intero, = 1

DATI DI OUTPUT
partita_attuale, la partita con turno impostato sul giocatore scelto, record di tipo partita

DATI DI LAVORO
estrazioni, il lancio effettuato da ogni giocatore di partita_attuale, Array ad una dimensione (NUMERO_MASSIMO_GIOCATORI) di Interi
indice_giocatori, indica lo spostamento all'interno dell'elenco dei giocatori presenti in partita_attuale, Intero, > 0, <= NUMERO_MASSIMO_GIOCATORI

ALGORITMO
indice_giocatori = 1
MENTRE (indice_giocatori <= leggere_numero_giocatori(partita_attuale))
    stampare_testo(file_scelta_g_iniziale)
    scelta = leggere_da_tastiera()
    SE (scelta = TASTO_LANCIO_DADI)
    ALLORA
        Elemento in posizione indice_giocatori di estrazioni = generare_numero(FACCIA_MINIMA_DADO, FACCIA_MASSIMA_DADO)
        stampare_dadi(file_scelta_g_iniziale)
    ALTRIMENTI
        SE (scelta = TASTO_USCITA)
        ALLORA
                 //torna al menu principale
        FINE
    FINE
    indice_giocatori = indice_giocatori + 1
FINE
partita_attuale = scrivere_turno(partita_attuale, trovare_posizione_massimo(estrazioni, leggere_numero_giocatori(partita_attuale)) - 1)



inizializzare_vincitore

DATI DI INPUT
partita_attuale, la partita da cui ottenere le informazioni relative al vincitore, record di tipo partita 

DATI DI OUTPUT
vincitore_partita, il vincitore di partita_attuale, record di tipo vincitore

ALGORITMO
vincitore_partita = scrivere_nome_vincitore(vincitore_partita, leggere_nome_giocatore(leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))))
vincitore_partita = scrivere_pedina_vincitore(vincitore_partita, leggere_pedina_giocatore(leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))))
vincitore_partita = scrivere_lanci_vincitore(vincitore_partita, leggere_lanci_effettuati(leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))))
vincitore_partita = scrivere_lunghezza_percorso_vincitore(vincitore_partita, leggere_lunghezza_percorso(partita_attuale))
vincitore_partita = scrivere_punteggio(vincitore_partita, 0)



generare_numero

DATI DI INPUT
file_seme, contiene il seme da cui generare il numero casuale, file di tipo binario
numero_massimo, il numero massimo che si vuole generare, Intero, > 0
numero_minimo, il numero minimo che si vuole generare, Intero, > 0

DATI DI OUTPUT
numero_casuale, numero risultato della funzione di generazione, intero, > 0, <= FACCIA_MASSIMA_DADO

DATI DI LAVORO
seme, contiene il seme dal quale generare il numero pseudo_casuale, intero, > 0

ALGORITMO
seme = leggere_da_file (file_seme)
seme = generare_seme (seme)
file_seme = scrivere_su_file (file_seme, seme)
numero_casuale = generare_casuale (seme, numero_massimo, numero_minimo)



generare_seme

DATI DI INPUT
seme, contiene il seme dal quale generare il nuovo seme, intero, > 0

DATI DI OUTPUT
nuovo_seme, contiene il nuovo seme risultato dalle operazioni eseguite sul seme vecchio, intero, > 0

ALGORITMO
seme = (MOLTIPLICATORE * seme + INCREMENTO) % DIVISORE



generare_casuale

DATI DI INPUT
seme, contiene il seme dal quale generare il numero casuale, intero, > 0
numero_massimo, il numero massimo che si vuole generare, Intero, > 0
numero_minimo, il numero minimo che si vuole generare, Intero, > 0

DATI DI OUTPUT
numero_casuale, numero risultato della funzione di generazione, intero, > 0, <= FACCIA_MASSIMA_DADO

ALGORITMO
numero_casuale = (seme % numero_massimo) + numero_minimo



trovare_posizione_massimo
DATI DI INPUT
valori, elenco di valori di cui trovare la posizione del massimo, Array a una dimensione (dimensione_valori) di Interi
dimensione_valori, numero di elementi presenti in valori, Intero, > 0

DATI DI OUTPUT
posizione_massimo, la posizione del valore più grande presente in valori, Intero, > 0, <= dimensione_valori

DATI DI LAVORO
indice_valori, indica lo spostamento all’interno di valori, Intero, > 0, < dimensione_valori
massimo, il valore massimo tra gli elementi nell'elenco valori, Intero

ALGORITMO
indice_valori = 1
massimo = elemento in posizione indice_valori di valori
posizione_massimo = indice_valori
MENTRE (indice_valori < dimensione_valori)
    indice_valori = indice_valori + 1
    SE (massimo < Elemento in posizione indice_valori di valori)
    ALLORA
        massimo = Elemento in posizione indice_valori di valori
        posizione_massimo = indice_valori
    FINE
FINE



cambiare_turno

DATI DI INPUT
partita_attuale, record di cui stabilire il giocatore di turno , record di tipo partita

DATI DI OUTPUT
partita_attuale, record con il numero del giocatore di turno inserito, record di tipo partita

ALGORITMO
partita_attuale = scrivere_turno (partita_attuale, leggere_turno (partita_attuale) + 1)
SE (leggere_turno(partita_attuale) > leggere_numero_giocatori (partita_attuale))
ALLORA 
    partita_attuale = scrivere_turno(partita_attuale, 1)
FINE



lanciare_dadi
DATI DI INPUT
partita_attuale, la partita in cui si desidera lanciare i dadi, record di tipo partita
FACCIA_MINIMA_DADO, il numero minimo presente sulle facce di un dado, Intero, = 1
FACCIA_MASSIMA_DADO, il numero massimo presente sulle facce di un dado, Intero, = 6
NUMERO_DADI, il numero di dadi da utilizzare durante la partita, Intero, = 2

DATI DI OUTPUT
partita_attuale, la partita con il lancio dei dadi inserito, record di tipo partita

DATI DI LAVORO
lancio, contiene il lancio di un singolo dado, Intero, >= FACCIA_MINIMA_DADO, <= FACCIA_MASSIMA_DADO
indice_dado, il dado che si sta tirando, Intero, > 0, <= NUMERO_DADI

ALGORITMO
indice_dado = 1
MENTRE (indice_dado <= NUMERO_DADI)
    lancio = generare_numero(FACCIA_MINIMA_DADO, FACCIA_MASSIMA_DADO)
    partita_attuale = scrivere_dadi(partita_attuale, indice_dado, lancio)
    indice_dado = indice_dado + 1
FINE




incrementare_lanci_effettuati
DATI DI INPUT
partita_attuale, la partita di cui incrementare lanci_effettuati, record di tipo partita

DATI DI OUTPUT
partita_attuale, la partita con lanci_effettuati incrementati, record di tipo partita

DATI DI LAVORO
giocatore_attuale, il giocatore a cui incrementare il numero di lanci_effettuati, record di tipo giocatore
lanci_effettuati, i lanci di giocatore_attuale, Intero

ALGORITMO
giocatore_attuale = leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))
lanci_effettuati = leggere_lanci_effettuati(giocatore_attuale)
lanci_effettuati = lanci_effettuati + 1
giocatore_attuale = scrivere_lanci_effettuati(giocatore_attuale, lanci_effettuati)
partita_attuale = scrivere_giocatori(partita_attuale, giocatore_attuale, leggere_turno(partita_attuale))




spostare_giocatore
DATI DI INPUT
partita_attuale, la partita in cui aggiornare la posizione del giocatore di turno in seguito al lancio dei dadi, record di tipo partita

DATI DI OUTPUT
partita_attuale, la partita con la posizione del giocatore di turno aggiornata, record di tipo partita

ALGORITMO
partita_attuale = sommare_lancio_posizione (partita_attuale)
SE ( leggere_posizione_giocatore (leggere_giocatore (partita_attuale, leggere_turno (partita_attuale))) > leggere_lunghezza_percorso(partita_attuale))
ALLORA
    partita_attuale = calcolare_caselle_eccesso (partita_attuale)
FINE



sommare_lancio_posizione

DATI DI INPUT
partita_attuale, la partita in cui aggiornare la posizione del giocatore di turno in base all'ultimo lancio di dadi, record di tipo partita

DATI DI OUTPUT
partita_attuale, la partita con la posizione del giocatore aggiornata in base all'ultimo lancio dei dadi, record di tipo partita

DATI DI LAVORO
giocatore_attuale, il giocatore di turno di cui calcolare la nuova posizione, record di tipo giocatore

ALGORITMO
giocatore_attuale = scrivere_posizione_giocatore ( leggere_giocatore (partita_attuale, leggere_turno (partita_attuale) ), leggere_posizione_giocatore ( leggere_giocatore (partita_attuale, leggere_turno (partita_attuale) ) ) + sommare_dadi (partita_attuale) )
partita_attuale = scrivere_giocatore(partita_attuale, giocatore_attuale, leggere_turno(partita_attuale))



calcolare_caselle_eccesso

DATI DI INPUT
partita_attuale, partita di cui calcolare le caselle in eccesso derivanti dallo spostamento del giocatore di turno, record di tipo partita

DATI DI OUTPUT
partita_attuale, partita con la posizione del giocatore di turno ricalcolata secondo l'eccesso derivante dal lancio dei dadi, record di tipo partita

DATI DI LAVORO
giocatore_attuale, contiene il giocatore di cui calcolare le caselle in eccesso e di cui ricalcolare la posizione, record di tipo giocatore
eccesso, il numero di caselle in più rispetto alla lunghezza del percorso, Intero, > 0

ALGORITMO
eccesso = leggere_posizione_giocatore (leggere_giocatore (partita_attuale, leggere_turno (partita_attuale))) - leggere_lunghezza_percorso (partita_attuale)
giocatore_attuale = leggere_giocatore (partita_attuale, leggere_turno (partita_attuale))
partita_attuale = scrivere_giocatore (partita_attuale, scrivere_posizione_giocatore (giocatore_attuale, leggere_posizione_giocatore (giocatore_attuale ) - eccesso), leggere_turno (partita_attuale))



sommare_dadi
DATI DI INPUT
partita_attuale, la partita di cui calcolare la somma del risultato del lancio dei dadi, record di tipo partita
NUMERO_DADI, il numero di dadi da utilizzare durante la partita, Intero, = 2

DATI DI OUTPUT
somma_dadi, la somma del lancio dei dadi di partita_attuale, Intero, >= FACCIA_MINIMA_DADO + FACCIA_MINIMA_DADO, <= FACCIA_MASSIMA_DADO + FACCIA_MASSIMA_DADO

DATI DI LAVORO
indice_dado, indica lo spostamento all'interno del'elenco delle facce risultanti dal l'ultimo lancio dei dadi, Intero, > 0, <= NUMERO_DADI

ALGORITMO
somma_dadi = 0
indice_dado = 1
MENTRE (indice_dado <= NUMERO_DADI)
    somma_dadi = somma_dadi + leggere_dadi(partita_attuale, indice_dado)
    indice_dado = indice_dado + 1
FINE



verificare_casella
DATI DI INPUT
partita_attuale, partita di cui verificare se il tipo di casella, record di tipo partita
file_schermata_oca, il file contenente la schermata rappresentante la casella oca, file di testo
file_schermata_ponte, il file contenente la schermata rappresentante la casella ponte, file di testo
file_schermata_locanda, il file contenente la schermata rappresentante la casella locanda, file di testo
file_schermata_pozzo, il file contenente la schermata rappresentante la casella pozzo, file di testo
file_schermata_prigione, il file contenente la schermata rappresentante la casella prigione, file di testo
file_schermata_labirinto, il file contenente la schermata rappresentante la casella labirinto, file di testo
file_schermata_scheletro, il file contenente la schermata rappresentante la casella scheletro, file di testo
NOME_OCA, il nome della casella oca, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "OCA\0"
NOME_PRIGIONE, il nome della casella prigione, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "PRIGIONE\0"
NOME_PONTE, il nome della casella ponte, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "PONTE\0"
NOME_LABIRINTO, il nome della casella labirinto, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "LABIRINTO\0"
NOME_LOCANDA, il nome della casella locanda, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "LOCANDA\0"
NOME_POZZO, il nome della casella pozzo, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "POZZO\0"
NOME_SCHELETRO, il nome della casella scheletro, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "SCHELETRO\0"
NOME_VITTORIA, il nome della casella vittoria, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "VITTORIA\0"CASELLA_ARRIVO_LABIRINTO, la posizione in cui spostare il giocatore che giunge sulla casella avente come nome NOME_LABIRINTO, Intero, Costante = 33
CASELLA_ARRIVO_SCHELETRO, la posizione in cui spostare il giocatore che giunge sulla casella avente come nome NOME_SCHELETRO, Intero, = 1

DATI DI OUTPUT
partita_attuale, la partita con l'effetto della casella applicato al giocatore di turno, record di tipo partita

DATI DI LAVORO
giocatore_attuale, il giocatore a cui applicare l'effetto, record di tipo giocatore
nome, il nome della cella nella quale si trova giocatore_attuale, Array a una dimensione di caratteri (terminante con FINE_STRINGA)

ALGORITMO
ESEGUI
    giocatore_attuale = leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))
    nome = leggere_nome_casella(leggere_percorso(partita_attuale, leggere_posizione_giocatore(giocatore_attuale)))
    SE (confrontare_stringhe(nome, NOME_OCA) = VERO)
    ALLORA
        stampare_testo(file_schermata_oca)
        partita_attuale = gestire_oca(partita_attuale)
    ALTRIMENTI
        SE (confrontare_stringhe(nome, NOME_PONTE) = VERO)
        ALLORA
            stampare_testo(file_schermata_ponte)
            partita_attuale = spostare_giocatore(partita_attuale)
        ALTRIMENTI
            SE (confrontare_stringhe(nome, NOME_LOCANDA) = VERO)
            ALLORA
                stampare_testo(file_schermata_locanda)
                giocatore_attuale = scrivere_autorizzazione(giocatore_attuale, TURNI_ATTESA_LOCANDA)
                partita_attuale = scrivere_giocatori(partita_attuale, giocatore_attuale, leggere_turno(partita_attuale))
            ALTRIMENTI
                SE (confrontare_stringhe(nome, NOME_POZZO) = VERO)
                ALLORA
                    stampare_testo(file_schermata_pozzo)
                    partita_attuale = impostare_autorizzazioni(partita_attuale, NOME_POZZO)
                ALTRIMENTI
                    SE (confrontare_stringhe(nome, NOME_PRIGIONE) = VERO)
                    ALLORA
                        stampare_testo(file_schermata_prigione)
                        partita_attuale = impostare_autorizzazioni(partita_attuale, NOME_PRIGIONE)
                    ALTRIMENTI
                        SE (confrontare_stringhe(nome, NOME_LABIRINTO) = VERO)
                        ALLORA
                            stampare_testo(file_schermata_labirinto)
                            giocatore_attuale = scrivere_posizione_giocatore(giocatore_attuale, calcolare_proporzione(leggere_lunghezza_percorso(partita_attuale), CASELLA_ARRIVO_LABIRINTO))
                            MENTRE (confrontare_stringhe(leggere_nome_casella(leggere_percorso(partita_attuale, leggere_posizione_giocatore(giocatore_attuale))), FINE_STRINGA) = FALSO)
                                giocatore_attuale = scrivere_posizione_giocatore(giocatore_attuale, leggere_posizione_giocatore(giocatore_attuale) - 1)
                            FINE
                            partita_attuale = scrivere_giocatori(partita_attuale, giocatore_attuale, leggere_turno(partita_attuale))
                        ALTRIMENTI
                            SE (confrontare_stringhe(nome, NOME_SCHELETRO) = VERO)
                            ALLORA
                                stampare_testo(file_schermata_scheletro)
                                giocatore_attuale = scrivere_posizione_giocatore(giocatore_attuale, CASELLA_ARRIVO_SCHELETRO)
                                partita_attuale = scrivere_giocatori(partita_attuale, giocatore_attuale, leggere_turno(partita_attuale))
                            FINE
                        FINE
                    FINE
                FINE
            FINE
        FINE
    FINE
    stampare_percorso(partita_attuale)
FINCHE' (leggere_nome_casella(leggere_percorso(partita_attuale, leggere_posizione_giocatore(giocatore_attuale))) != FINE_STRINGA)



gestire_oca
DATI DI INPUT
partita_attuale, la partita in cui gestire l'arrivo del giocatore di turno sulla casella oca, record di tipo partita
PRIMO_LANCIO_3_6, indica la casella su cui si sposterà il giocatore nel momento in cui arriverà su una casella oca con un 3 e un 6 ottenuto dal primo lancio dei dadi, intero, = 38
PRIMO_LANCIO_4_5, indica la casella su cui si sposterà il giocatore nel momento in cui arriverà su una casella oca con un 4 e un 5 ottenuto dal primo lancio dei dadi, intero, = 76
DADO_MINORE_PRIMO_LANCIO, faccia minore del primo lancio risultante nove, intero, = 3
DADO_MAGGIORE_PRIMO_LANCIO, faccia maggiore del primo lancio risultante nove, intero, = 6
PRIMO_DADO, la posizione del dado numero 1 nel campo ultimo_lancio del record partita, Intero, = 1
FINE_STRINGA, il carattere utilizzato come fine stringa, Carattere, = '\0'

DATI DI OUTPUT
partita_attuale, la partita con l'effetto della casella oca applicata al giocatore di turno, record di tipo partita

DATI DI LAVORO
giocatore_attuale, il giocatore di turno a cui applicare l'effetto della casella oca, record di tipo giocatore

ALGORITMO
giocatore_attuale = leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))
SE (leggere_lanci_effettuati(giocatore_attuale) = 1)
ALLORA
    SE ((leggere_dadi(partita_attuale, PRIMO_DADO) = DADO_MINORE_PRIMO_LANCIO)) OR ((leggere_dadi(partita_attuale, PRIMO_DADO) = DADO_MAGGIORE_PRIMO_LANCIO))
    ALLORA
        giocatore_attuale = scrivere_posizione_giocatore(giocatore_attuale, calcolare_proporzione(leggere_lunghezza_percorso(partita_attuale), PRIMO_LANCIO_3_6))
    ALTRIMENTI
        giocatore_attuale = scrivere_posizione_giocatore(giocatore_attuale, calcolare_proporzione(leggere_lunghezza_percorso(partita_attuale), PRIMO_LANCIO_4_5))
    FINE
    MENTRE (confrontare_stringhe(leggere_nome_casella(leggere_percorso(partita_attuale, leggere_posizione_giocatore(giocatore_attuale))), FINE_STRINGA) = FALSO)
        giocatore_attuale = scrivere_posizione_giocatore(giocatore_attuale, leggere_posizione_giocatore(giocatore_attuale) - 1)
    FINE
    partita_attuale = scrivere_giocatori(partita_attuale, giocatore_attuale, leggere_turno(partita_attuale))
ALTRIMENTI
    partita_attuale = spostare_giocatore(partita_attuale)
FINE



impostare_autorizzazioni
DATI DI INPUT
partita_attuale, la partita in cui gestire la casella speciale su cui è arrivato il giocatore di turno, record di tipo partita
file_schermata_liberato, il file contenente la schermata rappresentante l'uscita di prigione, file di testo
nome_casella_attuale, il nome della casella per cui impostare le autorizzazioni del giocatore di turno di partita_attuale, Array a una dimensione (DIMENSIONE_MASSIMA_NOME_CASELLA) di caratteri (terminante con FINE_STRINGA)

DATI DI OUTPUT
partita_attuale, la partita con l'effetto della casella speciale su cui è arrivato il giocatore di turno applicato, record di tipo partita

DATI DI LAVORO
giocatore_attuale, il giocatore di turno di cui impostare l'autorizzazione in base alla casella speciale di arrivo, record di tipo giocatore
indice_giocatore, la posizione del giocatore analizzato, Intero, > 0

ALGORITMO
indice_giocatore = 1
MENTRE (indice_giocatore <= leggere_numero_giocatori(partita_attuale))
    giocatore_attuale = leggere_giocatore(partita_attuale, indice_giocatore)
    SE (confrontare_stringhe (leggere_nome_casella (leggere_percorso (partita_attuale, leggere_posizione_giocatore(giocatore_attuale))), nome_casella_attuale) = VERO)
    ALLORA
        stampare_testo(file_schermata_liberato)
        giocatore_attuale = scrivere_autorizzazione(giocatore_attuale, 0)
        partita_attuale = scrivere_giocatori(partita_attuale, giocatore_attuale, indice_giocatore)
    FINE
    indice_giocatore = indice_giocatore + 1
FINE
giocatore_attuale = leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))
giocatore_attuale = scrivere_autorizzazione(giocatore_attuale, 1)
partita_attuale = scrivere_giocatori(partita_attuale, giocatore_attuale, leggere_turno(partita_attuale))



gestire_autorizzazione
DATI DI INPUT
partita_attuale, la partita in cui gestire l'autorizzazione, record di tipo partita
NOME_LOCANDA, il nome della casella locanda, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "LOCANDA\0"
NOME_PRIGIONE, il nome della casella prigione, Array a una dimensione di caratteri (terminante con FINE_STRINGA), = "PRIGIONE\0"
DADO_MINORE_USCITA_PRIGIONE, la prima faccia di dado che consente l'uscita dalla prigione, Intero, = 5
DADO_MAGGIORE_USCITA_PRIGIONE, la seconda faccia di dado che consente l'uscita dalla prigione, Intero, = 7

DATI DI OUTPUT
partita_attuale, la partita con l'autorizzazione gestita, record di tipo partita

DATI DI LAVORO
giocatore_attuale, il giocatore di cui gestire l'autorizzazione, record di tipo giocatore

ALGORITMO
giocatore_attuale = leggere_giocatore(partita_attuale, leggere_turno(partita_attuale))
SE (confrontare_stringhe(leggere_nome_casella(leggere_percorso(partita_attuale, leggere_posizione_giocatore(giocatore_attuale))), NOME_LOCANDA) = VERO)
ALLORA
    giocatore_attuale = scrivere_autorizzazione(giocatore, leggere_autorizzazione(giocatore_attuale) - 1)
    //stampare schermata_locanda_turno_passato e attende input
ALTRIMENTI
    SE (confrontare_stringhe(leggere_nome_casella(leggere_percorso(partita_attuale, leggere_posizione_giocatore(giocatore_attuale))), NOME_PRIGIONE) = VERO)
    ALLORA
        //stampare schermata_lancio_dadi_prigione e richiedere input
        partita_attuale = lanciare_dadi(partita_attuale)
        //stampare schermata_lancio_dadi_prigione con lancio effettuato e richiedere input
        SE ((sommare_dadi(partita_attuale) = DADO_MINORE_USCITA_PRIGIONE) OR (sommare_dadi(partita_attuale) = DADO_MAGGIORE_USCITA_PRIGIONE))
        ALLORA
            giocatore_attuale = scrivere_autorizzazione(giocatore, 0)
        FINE
    FINE
FINE
partita_attuale = scrivere_giocatore(partita_attuale, giocatore_attuale, leggere_turno(partita_attuale))



confrontare_stringhe
DATI DI INPUT
stringa_1, prima sequenza di caratteri da confrontare, Array a una dimensione di caratteri (terminante con FINE_STRINGA)
stringa_2, seconda sequenza di caratteri da confrontare, Array a una dimensione di caratteri (terminante con FINE_STRINGA)
FINE_STRINGA, il carattere utilizzato come fine stringa, Carattere, Costante = '\0'

DATI DI OUTPUT
esito, indica se le stringhe in input sono uguali o no, booleano, = FALSO (le stringhe sono diverse), = VERO (le stringhe sono uguali)

DATI DI LAVORO
indice_stringa, contatore per spostamento in stringa_1, Intero, > 0

ALGORITMO
indice_stringa = 1
esito = VERO
MENTRE(Elemento in posizione indice_stringa di stringa_1 != FINE_STRINGA)
    SE(Elemento in posizione indice_stringa di stringa_1 != Elemento in posizione indice_stringa di stringa_2)
    ALLORA
        esito = FALSO
    FINE
    indice_stringa = indice_stringa + 1
FINE
